{"version":3,"sources":["webpack:///./src/components/image-mapper.module.css","webpack:///./src/pages/index.js","webpack:///./src/images/musculoskeletal.png","webpack:///./src/components/image-mapper.js","webpack:///./src/utils/canvas.js","webpack:///./src/pages/index.module.css"],"names":["module","exports","ListLink","props","className","styles","listLink","to","children","Home","data","homePage","title","description","site","siteMetadata","row","column","listLinks","src","musculoskeletal","map","name","areas","shape","coords","href","home","orgWidth","orgHeight","height","source","ImageMapper","hoverAction","lineWidth","strokeColor","newWidth","newHeight","window","width","canvas","context","canvasRef","useRef","hoverOn","altCoords","fillColor","current","getContext","i","arrows","length","arrow","drawArrow","text","drawText","textFont","textAlign","circles","circle","drawCircle","drawRect","hoverOff","clearRect","useEffect","scale","containerHome","containerOverlay","useMap","style","alt","imageMap","ref","a","onMouseEnter","bind","onMouseLeave","left","top","right","bot","fillStyle","strokeRect","fillRect","centerX","centerY","radius","beginPath","arc","Math","PI","fill","font","x","y","fillText","getArrowPoints","botX","botY","topX","topY","totalHeight","sqrt","bodyWidth","arrowHeight","arrowWidth","arrowLength","arrowInnerLength","angle","atan2","outerAngle","innerAngle","angle90","mid1X","cos","mid1Y","sin","mid2X","mid2Y","mid3X","mid3Y","mid4X","mid4Y","arrowCoords","bot1X","bot1Y","bot2X","bot2Y","moveTo","lineTo","closePath"],"mappings":"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","file":"component---src-pages-index-js-d44e64944d0bfe3e4568.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerHome\":\"image-mapper-module--containerHome--3GXfu\",\"containerOverlay\":\"image-mapper-module--containerOverlay--1Il1H\",\"imageMap\":\"image-mapper-module--imageMap--29wKU\",\"canvas\":\"image-mapper-module--canvas--2uH4N\"};","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport SEO from \"../components/seo\"\nimport ImageMapper from \"../components/image-mapper\"\nimport styles from \"./index.module.css\"\nimport musculoskeletal from \"../images/musculoskeletal.png\"\n\n// home page\n// anatomy with highlightable links to other pages\n// links to anatomical terminology, stretches, activation, warm up, cool down\n\n// TODO: deploy to Gatsby Cloud?\n\nconst ListLink = props => (\n    <li className={styles.listLink}>\n      <Link to={props.to}>{props.children}</Link>\n    </li>\n)\n\nexport default function Home({ data }) {\n    \n    const ANATOMY_MAP = {\n        name: \"anatomy-map\",\n        areas: [\n            {name: \"Ankle\", shape: \"rect\", coords: [119,628,278,677], href: \"/4-ankle\"},\n            {name: \"Knee\", shape: \"rect\", coords: [115,469,284,560], href: \"/5.1-knee\"},\n            {name: \"Hip\", shape: \"rect\", coords: [121,292,266,428], href: \"/5.2-hip\"},\n            {name: \"Spine\", shape: \"rect\", coords: [209,214,172,132], href: \"/6-spine\"},\n            {name: \"Core\", shape: \"rect\", coords: [132,217,251,290], href: \"/7-core\"},\n            {name: \"Shoulder\", shape: \"rect\", coords: [94,132,161,202], href: \"/8-shoulder\"},\n            {name: \"Shoulder\", shape: \"rect\", coords: [220,198,284,131], href: \"/8-shoulder\"},\n            {name: \"Elbow\", shape: \"rect\", coords: [75,228,128,289], href: \"/9-elbow\"},\n            {name: \"Elbow\", shape: \"rect\", coords: [255,283,300,226], href: \"/9-elbow\"},\n            {name: \"Wrist\", shape: \"rect\", coords: [46,310,106,345], href: \"/10.1-wrist\"},\n            {name: \"Wrist\", shape: \"rect\", coords: [279,310,339,345], href: \"/10.1-wrist\"},\n            {name: \"Hand\", shape: \"rect\", coords: [28,355,99,412], href: \"/10.2-hand\"},\n            {name: \"Hand\", shape: \"rect\", coords: [351,355,281,407], href: \"/10.2-hand\"},\n            {name: \"Head and Neck\", shape: \"rect\", coords: [136,20,244,127], href: \"/11-head-and-neck\"},\n        ],\n    }\n\n    return (\n        <Layout homePage={true}>\n            <SEO title=\"Home\" description={data.site.siteMetadata.description} />\n            <h1>Home</h1>\n            <div className={styles.row}>\n                <div className={styles.column}>\n                    <p>Welcome to {data.site.siteMetadata.title}. Click the links below or different body parts on the anatomical diagram to learn more!</p>\n                    <ul className={styles.listLinks}>\n                        <ListLink to=\"/terminology\">Terminology</ListLink>\n                        <ListLink to=\"/stretches\">Stretches</ListLink>\n                        {/* <ListLink to=\"/activation\">Activation</ListLink> */}\n                        <ListLink to=\"/warm-up\">Warm Up</ListLink>\n                        <ListLink to=\"/cool-down\">Cool Down</ListLink>\n                    </ul>\n                    <p>Credit to CMS athletic trainers,  instructors of PE 090A <i>Prevention of Athletic Injuries</i>.</p>\n                    <br />\n                    <p>NOTE: Please make sure that if any of these exercises cause pain or discomfort to discontinue that activity and seek professional help for proper instructions on the movement.</p>\n                </div>\n                <div className={styles.column}>\n                    <ImageMapper src={musculoskeletal} map={ANATOMY_MAP} name=\"anatomy-map\" home={true}\n                                 orgWidth={382} orgHeight={737} height={400}/>\n\n                    <a href=\"https://www.kenhub.com/en/library/anatomy/the-musculoskeletal-system\"\n                       className={styles.source}>Source: KenHub</a>\n                </div>\n            </div>\n        </Layout>\n    );\n}\n\nexport const query = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n                description\n            }\n        }\n    }\n`\n","module.exports = __webpack_public_path__ + \"static/musculoskeletal-d985b5c7be7f3f5cdae030fbf0b1b709.png\";","import React, { useRef, useEffect } from 'react'\nimport { Link } from 'gatsby'\n\nimport styles from \"./image-mapper.module.css\"\nimport { drawRect, drawArrow, drawText, drawCircle } from \"../utils/canvas\"\n\nexport default function ImageMapper({ orgWidth, orgHeight, height, src, name, map, hoverAction,\n                                      home=false, lineWidth=1, strokeColor=\"rgba(0, 0, 0, 0.5)\"}) {\n\n    var newWidth = orgWidth;\n    var newHeight = orgHeight;\n    if (height) {\n        newWidth = orgWidth * (height / orgHeight);\n        newHeight = height;\n    }\n    if (typeof window !== `undefined`) {\n        if (newWidth > window.width) {\n            newWidth = window.width;\n            newHeight = orgHeight * (window.width / orgWidth);\n        }\n    }\n\n    const canvasRef = useRef(null);\n    let canvas;\n    let context;\n\n    useEffect(() => {\n        canvas = canvasRef.current;\n        context = canvas.getContext('2d');\n        canvas.width = newWidth * 2;\n        canvas.height = newHeight * 2;\n        context.scale(2, 2);\n    }, [context]);\n\n    // Adapted from https://github.com/coldiary/react-image-mapper/blob/master/src/ImageMapper.js\n    function hoverOn(name, coords, altCoords, shape, fillColor=\"rgba(255, 255, 255, 0.5)\") {\n        context = canvasRef.current.getContext('2d');\n        if (!altCoords) {\n            switch (shape) {\n                case \"rect\":\n                    drawRect(context, coords, fillColor, lineWidth, strokeColor);\n                    break;\n                case \"poly\":\n                    drawArrow(context, coords, fillColor);\n                    break;\n            }\n        } else {\n            for (let i = 0; i < altCoords.arrows.length; i++) {\n                const arrow = altCoords.arrows[i];\n                drawArrow(context, arrow.coords, fillColor);\n            }\n            for (let i = 0; i < altCoords.text.length; i++) {\n                const text = altCoords.text[i];\n                drawText(context, text.coords, text.text, text.textFont, text.textAlign, fillColor);\n            }\n            for (let i = 0; i < altCoords.circles.length; i++) {\n                const circle = altCoords.circles[i];\n                drawCircle(context, circle.coords, fillColor);\n            }\n        }\n\n        if (hoverAction) {\n            hoverAction(name);\n        }\n    }\n\n    function hoverOff() {\n        context = canvasRef.current.getContext('2d');\n        context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n    }\n    \n    return (\n        <div className={home ? styles.containerHome : styles.containerOverlay}>\n            {src ? \n            <img src={src} \n                 useMap={'#' + name}\n                 style={{width: newWidth, height: newHeight}}\n                 alt={name} \n                 className={styles.imageMap}\n            /> :\n            <></>}\n            <canvas ref={canvasRef}\n                    className={styles.canvas} style={{width: newWidth, height: newHeight}}\n            />\n            <map name={name}>\n                {map.areas.map((a) => {\n                    for (let i = 0; i < a.coords.length; i++) {\n                        a.coords[i] *= (newHeight / orgHeight);\n                    }\n                    if (a.href) {\n                        return <Link to={a.href}>\n                                <area alt={a.name} title={a.name}\n                                      // key={index}\n                                      coords={a.coords} shape={a.shape}\n                                      onMouseEnter={hoverOn.bind(this, a.name, a.coords, a.altCoords, a.shape, a.fillColor)}\n                                      onMouseLeave={hoverOff.bind(this)} />\n                                </Link>\n                    }\n                    return <area alt={a.name} title={a.name}\n                                 // key={index}\n                                 coords={a.coords} shape={a.shape}\n                                 onMouseEnter={hoverOn.bind(this, a.name, a.coords, a.altCoords, a.shape, a.fillColor)}\n                                 onMouseLeave={hoverOff.bind(this)} />\n                })}\n            </map>\n        </div>\n    );\n}","export function drawRect(context, coords, fillColor, lineWidth, strokeColor) {\n    let [left, top, right, bot] = coords;\n    context.fillStyle = fillColor;\n    context.lineWidth = lineWidth;\n    context.strokeColor = strokeColor;\n    context.strokeRect(left, top, right - left, bot - top);\n    context.fillRect(left, top, right - left, bot - top);\n}\n\nexport function drawCircle(context, coords, fillColor) {\n    const [centerX, centerY, radius] = coords;\n    context.fillStyle = fillColor;\n    context.beginPath();\n    context.arc(centerX, centerY, radius, 0, 2 * Math.PI);\n    context.fill();\n}\n\nexport function drawText(context, coords, text, font, textAlign, fillColor) {\n    const [x,y] = coords;\n    context.font = font;\n    context.textAlign = textAlign;\n    context.fillStyle = fillColor;\n    context.fillText(text, x, y);\n}\n\nexport function getArrowPoints(coords) {\n    const [botX, botY, topX, topY] = coords;\n    const totalHeight = Math.sqrt((topY - botY) ** 2 + (topX - botX) ** 2);\n    const bodyWidth = 0.3 * totalHeight;\n    const arrowHeight = 0.4 * totalHeight;\n    const arrowWidth = 1.2 * totalHeight;\n\n    const arrowLength = Math.sqrt((arrowWidth / 2) ** 2 + arrowHeight ** 2);\n    const arrowInnerLength = Math.sqrt((bodyWidth / 2) ** 2 + arrowHeight ** 2);\n    const angle = Math.atan2(topY-botY, topX-botX);\n    const outerAngle = Math.PI/4;\n    const innerAngle = Math.atan2(bodyWidth/2, arrowHeight);\n    const angle90 = Math.PI/2;\n\n    const mid1X = topX - arrowLength * Math.cos(angle - outerAngle);\n    const mid1Y = topY - arrowLength * Math.sin(angle - outerAngle);\n    const mid2X = topX - arrowInnerLength * Math.cos(angle - innerAngle);\n    const mid2Y = topY - arrowInnerLength * Math.sin(angle - innerAngle);\n    const mid3X = topX - arrowInnerLength * Math.cos(angle + innerAngle);\n    const mid3Y = topY - arrowInnerLength * Math.sin(angle + innerAngle);\n    const mid4X = topX - arrowLength * Math.cos(angle + outerAngle);\n    const mid4Y = topY - arrowLength * Math.sin(angle + outerAngle);\n\n    const bot1X = botX - bodyWidth * Math.cos(angle - angle90);\n    const bot1Y = botY - bodyWidth * Math.sin(angle - angle90);\n    const bot2X = botX - bodyWidth * Math.cos(angle + angle90);\n    const bot2Y = botY - bodyWidth * Math.sin(angle + angle90);\n\n    return [topX, topY, mid1X, mid1Y, mid2X, mid2Y, bot1X, bot1Y, bot2X, bot2Y, mid3X, mid3Y, mid4X, mid4Y];\n}\n\nexport function drawArrow(context, coords, fillColor) {\n    //                  |\\\n    //          --------  \\\n    //                     \\\n    //                     /\n    //          --------  /\n    //                  |/\n    let arrowCoords = coords;\n    if (coords.length === 4) {\n        arrowCoords = getArrowPoints(coords);\n    }\n    let [topX, topY, mid1X, mid1Y, mid2X, mid2Y, bot1X, bot1Y, bot2X, bot2Y, mid3X, mid3Y, mid4X, mid4Y] = arrowCoords;\n\n    context.fillStyle = fillColor;\n    context.beginPath();\n    context.moveTo(topX, topY);\n    context.lineTo(mid1X, mid1Y);\n    context.lineTo(mid2X, mid2Y);\n    context.lineTo(bot1X, bot1Y);\n    context.lineTo(bot2X, bot2Y);\n    context.lineTo(mid3X, mid3Y);\n    context.lineTo(mid4X, mid4Y);\n    context.closePath();\n    // context.stroke();\n    context.fill();\n}\n\n// const midSlope = (topY - botY) / (topX - botX);\n// const midYInt = botY - midSlope * botX;\n// const botSlope = -1 * midSlope;\n// const botYInt = botY - botSlope * botX;\n// const bot1X = \n// // const bot1X = (sqrt((-1 * (botX ** 2) * (botSlope ** 2)) + \n// //                     (2 * botX * botY * botSlope) - \n// //                     (2 * botX * botSlope * botYInt) - \n// //                     (botY ** 2) + \n// //                     (2 * botY * botYInt) + \n// //                     ((botSlope ** 2) * ((bodyWidth / 2) ** 2)) +\n// //                     ((bodyWidth / 2) ** 2) - \n// //                     (botYInt ** 2)\n// //                    ) +\n// //                 (botX + botY * botSlope - botSlope * botYInt)\n// //               ) / (botSlope ** 2 + 1);\n// const bot1Y = botSlope * bot1X + botYInt;\n// const bot2X = -1 * bot1X;\n// const bot2Y = botSlope * bot2X + botYInt;\n// const ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"column\":\"index-module--column--30rVy\",\"row\":\"index-module--row--iPaCs\",\"listLinks\":\"index-module--listLinks--2LvKr\",\"listLink\":\"index-module--listLink--1pFM8\",\"source\":\"index-module--source--3cQc0\"};"],"sourceRoot":""}